// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String    @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?
  country       String?
  state         String?
  city          String?
  isAdmin       Boolean @default(false)
  isBanned      Boolean @default(false)
  // TOTO: Link with users bookins, sellerprofiles, etc
  sellerProfile SellerProfile?
  bookings      ServiceBooking[]
  transactions  Transaction[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  @@unique([identifier, token])
}


// Information about the seller as well as revenue (balance)
model SellerProfile {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio           String?
  logo          String?
  slug          String    @unique
  balance       Float @default(0)
  phoneNumber   String?
  email         String?
  website       String?
  socialLinks   SocialLink[]
  services      Service[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SocialLink {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  url           String
  sellerId      String @db.ObjectId @unique
  seller        SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


// Service Informations about a specific service delivered by a seller
model Service {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  sellerId      String @db.ObjectId @unique
  seller        SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  name          String
  description   String
  coverImage    String?
  categoryId    String @db.ObjectId
  category      ServiceCategory @relation(fields: [categoryId], references: [id])
  prices        ServicePrice[]
  medias        ServiceMedia[]
  bookings      ServiceBooking[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


model ServiceCategory {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  services      Service[]
  name          String
  image         String?
  icon          String?
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


// Price Range for a service (Price amount and description)
model ServicePrice {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  serviceId     String @db.ObjectId
  service       Service @relation(fields: [serviceId], references: [id])
  amount        Float
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


// Media Files related to the service (Type, Url and description)
model ServiceMedia {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  serviceId     String @db.ObjectId
  service       Service @relation(fields: [serviceId], references: [id])
  type          MediaType @default(image)
  url           String
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum MediaType  {
  image
  video
  document
}




// Each time a service is booked by a user with informations about his booking
model ServiceBooking {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId     String @db.ObjectId
  service       Service @relation(fields: [serviceId], references: [id])
  medias        BookingMedias[]
  review        BookingReview?
  startedAt     DateTime @default(now())
  deliveredAt   DateTime?
  status        BookingStatus  @default(pending)
  transaction   Transaction?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum BookingStatus {
  pending
  success
  canceled
}

// Review of service made after a booking is closed
model BookingReview {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  bookingId     String @db.ObjectId @unique
  booking       ServiceBooking @relation(fields: [bookingId], references: [id])
  stars         Int
  comment       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// The files sent by the service owner. Whether video or image with a description for each
model BookingMedias {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  bookingId     String @db.ObjectId
  booking       ServiceBooking @relation(fields: [bookingId], references: [id])
  type          MediaType @default(image)
  url           String
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


// Transactions for when user books service, when seller delivers, admin gets his comission the service and when seller withdraws money from his balance.
model Transaction {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  bookingId     String? @db.ObjectId @unique
  booking      ServiceBooking? @relation(fields: [bookingId], references: [id])
  userId        String    @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Float
  status        TransactionStatus @default(pending)
  type          TransactionType
  transactionMeta String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


enum TransactionStatus {
  pending
  success
  failed
}

enum TransactionType {
  booking_payment
  booking_cancelation
  seller_payment
}